using System;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using LibraryManagementSystem.DAL.Interfaces;
using LibraryManagementSystem.Models;
using LibraryManagementSystem.Models.ViewModels;

namespace LibraryManagementSystem.Controllers
{
    /// <summary>
    /// Contains the views and handlers for library item CRUD (Create, Read, Update, Delete)
    /// operations. The user must be logged in to access these operations.
    /// 
    /// NOTICE: This controller is used as a generic library item handler. If a item type contains additional
    ///         fields specific to only itself, a new controller must be created to handle the create, update,
    ///         and delete operations.
    /// </summary>
    [Authorize]
    public class LibraryItemsController : Controller
    {
        //Contains all of the cached LibraryItem objects
        private readonly ILibraryItemRepository _libraryItemRepository;

        public LibraryItemsController(ILibraryItemRepository libraryItemRepository)
        {
            _libraryItemRepository = libraryItemRepository;
        }

        
        /// <summary>
        /// Lists all of the library items in a table.
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Index()
        {
            return View(_libraryItemRepository.GetAll());
        }


        /// <summary>
        /// Displays a search form and search results listing for library items.
        /// </summary>
        /// <param name="search">The ViewModel generated by the form submission.</param>
        /// <returns>ActionResult</returns>
        [HttpGet]
        public ActionResult Search([Bind(Include = "FieldName, ItemType, Query")] LibraryItemsSearchViewModel search)
        {
            try
            {
                //Store the type of item to search by (Book, CD, etc.)
                var searchType  = (!string.IsNullOrEmpty(search.ItemType)) ? search.ItemType : "";

                //Store the field to search by (Title, author, etc.)
                var searchKey   = (!string.IsNullOrEmpty(search.FieldName)) ? search.FieldName : "";

                //Store the search query keywords
                var searchQuery = (!string.IsNullOrEmpty(search.Query)) ? search.Query : "";

                //If keywords were entered, then search the database for items that match the provided criteria
                if (!string.IsNullOrEmpty(searchQuery))
                {
                    //search the database for items that match the provided criteria
                    var searchResults = _libraryItemRepository.SearchLibraryItems(searchType, searchKey, searchQuery);

                    //Pass the search results (if any) to the view
                    ViewBag.searchResults = searchResults;

                    //Assign the search results to the search object
                    search.Results = searchResults;
                }
            }
            catch (Exception)
            {
                //An unknown error occurred. Throw an error message.
                ModelState.AddModelError(string.Empty, "Oops! Something went wrong. Please try another search.");
            }

            return View(search);
        }


        /// <summary>
        /// Displays the properties of a library item object.
        /// Route: library/{item type}/details/{id}
        /// </summary>
        /// <param name="id">The ID of the Library Item.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Details(int? id)
        {
            //Fetch the library item from the repository
            var libraryItem = _libraryItemRepository.Find(id);

            //If the library item isn't found, throw a 404 page not found error
            if (libraryItem == null)
               return HttpNotFound();

            return View(libraryItem);
        }


        /// <summary>
        /// Displays the form that creates a new library item.
        /// Route: /library/{item type}/create
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Create(string type)
        {
            //Fetch a list of the allowed types of library items.
            //This will be used to ensure that a valid item type is sent from the form.
            var allowedLibraryItemTypes = LibraryItem.GetItemTypes();
            
            //Check if the item type submitted from the form is a valid item type.
            //If not, throw a 404 page not found error
            if(!allowedLibraryItemTypes.Contains(type))
               return HttpNotFound();

            //Format the item type defined in the url as title case
            ViewBag.itemType = type.First().ToString().ToUpper() + type.Substring(1);
            return View();
        }


        /// <summary>
        /// Post request handler for the form that creates a new library item. Using the submitted
        /// data from the form, a new LibraryItem object is created and saved.
        /// </summary>
        /// <param name="libraryItem">An instance of a Library Item.</param>
        /// <returns>Action Result</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,Title,ItemType,PublicationYear,Author,Quantity,CanCheckOut")] LibraryItem libraryItem)
        {
            //If validation errors exist, send them to the form view
            if (!ModelState.IsValid)
                return View(libraryItem);

            //Add the library item to the repository
            _libraryItemRepository.Add(libraryItem);

            //Save the changes to the repository
            _libraryItemRepository.Save();

            //Reirect to the library item listing page
            return RedirectToAction("Index");
        }


        /// <summary>
        /// Displays the form to edit an existing library item.
        /// Route: /library/{item type}/edit/{id}
        /// </summary>
        /// <param name="id">The ID of an existing library item</param>
        /// <returns>ActionResult</returns>
        public ActionResult Edit(int? id)
        {
            var libraryItem = _libraryItemRepository.Find(id);

            if (libraryItem == null)
                return HttpNotFound();

            return View(libraryItem);
        }


        /// <summary>
        /// Post handler for edit form. Saves changes of the LibraryItem object
        /// to the repository.
        /// </summary>
        /// <param name="libraryItem">An instance of LibraryItem.</param>
        /// <returns>Action Result</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,Title,PublicationYear,Author,ItemType,Quantity,CanCheckOut")] LibraryItem libraryItem)
        {
            //If validation errors exist, send them to the form view
            if (!ModelState.IsValid)
                return View(libraryItem);

            //Update the library item's record in the repository
            _libraryItemRepository.Edit(libraryItem);

            //Save the changes to the repository
            _libraryItemRepository.Save();

            //Redirect the library item listing page
            return RedirectToAction("Index");
        }

        
        /// <summary>
        /// Displays a form to delete a library item.
        /// </summary>
        /// <param name="id">The ID of the library item.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Delete(int? id)
        {
            //Fetch the library item from the repository
            var libraryItem = _libraryItemRepository.Find(id);

            //If the library item isn't found, throw a 404 page not found error.
            if (libraryItem == null)
                return HttpNotFound();
            
            return View(libraryItem);
        }

        
        /// <summary>
        /// Delete a library item from the system.
        /// </summary>
        /// <param name="id">The ID of a library Item</param>
        /// <returns>ActionResult</returns>
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            //Fetch the library item from the repository
            var libraryItem = _libraryItemRepository.FindBy(x => x.Id == id).Include("Reservations").FirstOrDefault();

            //If the library item has been checked out or reserved by a customer, it can't be deleted.
            //
            //When the repository attempts to delete the library item, if the item is null, it will
            //simply not do anything, so a nullable check is only required here.
            if (libraryItem != null && libraryItem.Reservations.Count > 0)
            {
                ModelState.AddModelError(string.Empty, "This item has been checked out by one or more customers.");
                return View(libraryItem);
            }

            //Delete library item from the repository
            _libraryItemRepository.Delete(libraryItem);

            //Save the changes to the repository
            _libraryItemRepository.Save();

            return RedirectToAction("Index");
        }


        /// <summary>
        /// Releases loose objects and other unmanaged resources when the controller
        /// is no longer in use.
        /// Documentation: https://msdn.microsoft.com/en-us/library/fs2xkftw(v=vs.110).aspx
        /// </summary>
        /// <param name="disposing">Indicates whether the method call comes from a 
        ///             Dispose method (its value is true) or from a finalizer (its value is false).
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _libraryItemRepository.Dispose();
            }
            _libraryItemRepository.Dispose(disposing);
        }
        
    }
}
