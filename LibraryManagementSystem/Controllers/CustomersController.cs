using System;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using LibraryManagementSystem.DAL.Interfaces;
using LibraryManagementSystem.Models;
using LibraryManagementSystem.Models.ViewModels;
using MySql.Data.MySqlClient;

namespace LibraryManagementSystem.Controllers
{
    /// <summary>
    /// Contains the views and handlers for Customer object CRUD (Create, Read, Update, Delete)
    /// operations. The user must be logged in to access these operations.
    /// </summary>
    [Authorize]
    public class CustomersController : Controller
    {
        //Contains all of the cached Customer objects
        private readonly ICustomerRepository _customerRepo;

        public CustomersController(ICustomerRepository customerRepository)
        {
            _customerRepo = customerRepository;
        }


        /// <summary>
        /// Displays a view containing a single input field for a Customer's
        /// customer number to be entered.
        /// Route: /customers/find
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Find()
        {
            return View();
        }


        /// <summary>
        /// Post handler for the form in the Find() method. Finds the customer with the given
        /// customer number and redirects to that customer's details page.
        /// </summary>
        /// <param name="viewModel">The ViewModel generated by the form submission.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Find([Bind(Include = "CustomerNumber")] CustomerFindViewModel viewModel)
        {
            //Check for errors from the model
            if (!ModelState.IsValid)
                return View(viewModel);

            //Search for a customer with the given customer number
            var customer = _customerRepo.FindCustomerByCustomerNumber(viewModel.CustomerNumber);

            //If the customer exists, redirect to the customer's detail page
            if (customer != null)
                return RedirectToAction("Details", new { customer.Id });

            //The customer doesn't exist. Send an error to the view
            ModelState.AddModelError("customerNumber",
                "Sorry, there isn't a customer with that customer number.");

            return View(viewModel);
        }


        /// <summary>
        /// Displays a table that lists all of the customers.
        /// Route: /customers
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Index()
        {
            //Fetch all customers from the repository
            var customers = _customerRepo.GetAll();

            //Store a boolean flag that determines if any customers exist.
            //This makes the implementation of the view more simple by reducing
            //the code that would have to be written to make this check in the HTML.
            @ViewBag.customersExist = (customers != null && customers.Any());

            return View(customers);
        }


        /// <summary>
        /// Displays the properties of a Customer as well as the reservations assigned to
        /// the customer.
        /// Route: /customers/details/{id}
        /// </summary>
        /// <param name="id">The customer's ID.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Details(int? id)
        {
            //Get the customer's database record and all of their checked out/reserved items
            var customer = _customerRepo.FindBy(s => s.Id == id).Include(s => s.Reservations).Include("Reservations.LibraryItem").FirstOrDefault();

            //Throw 404 error if the customer doesn't exist
            if (customer == null)
                return HttpNotFound();

            //Calculate the total late fees and pass the total into the view
            @ViewBag.LateFee = _customerRepo.GetTotalFees(customer.Id);

            return View(customer);
        }


        /// <summary>
        /// Displays the form that creates a new customer.
        /// Route: /customers/create
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Create()
        {
            return View();
        }


        /// <summary>
        /// Post request handler for the form that creates a new customer. Using the submitted
        /// data from the form, a new Customer object is created and saved .
        /// </summary>
        /// <param name="customer">The Customer object generated by the form submission.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,CustomerNumber,FirstName,LastName,Email")] Customer customer)
        {
            //If validation errors exist, send them to the form view
            if (!ModelState.IsValid)
                return View(customer);

            try
            {
                //Add the custome to the repository
                _customerRepo.Add(customer);

                //Save the changes to the repository
                _customerRepo.Save();

                //Redirect to the Customer listing page
                return RedirectToAction("Index");
            }
            catch (Exception)
            {
                //An unknown error occurred. Throw an error message.
                ModelState.AddModelError(string.Empty, "Oops! Something went wrong. Please refresh and try again.");
            }

            return View(customer);
        }


        /// <summary>
        /// Displays the form to edit an existing Customer.
        /// Route: /customers/edit/{id}
        /// </summary>
        /// <param name="id">The ID of an existing Customer.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Edit(int? id)
        {
            //Find the customer object
            var customer = _customerRepo.Find(id);

            //If the customer couldn't be found, throw a 404 page not found error
            if (customer == null)
                HttpNotFound();

            return View(customer);
        }


        /// <summary>
        /// Post handler for edit form. Saves changes of the Customer object
        /// to the repository.
        /// </summary>
        /// <param name="customer">The ID of a Customer.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,CustomerNumber,FirstName,LastName,Email")] Customer customer)
        {
            //If validation errors exist, send them to the form view.
            if (!ModelState.IsValid)
                return View(customer);

            try
            {
                //Update the customer object in the repository
                _customerRepo.Edit(customer);

                //Save the changes to the repository
                _customerRepo.Save();

                //Redirect to the Customers listing page
                return RedirectToAction("Index");
            }
            catch (Exception)
            {
                //An unknown error occurred. Throw an error message.
                ModelState.AddModelError(string.Empty, "Oops! Something went wrong.");
            }

            return View(customer);
        }

        
        /// <summary>
        /// Displays the form to delete a customer.
        /// Route: /customers/delete/{id}
        /// </summary>
        /// <param name="id">The ID of a customer.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Delete(int id)
        {
            //Fetch the customer from the repository
            var customer = _customerRepo.Find(id);
            
            //If the customer isn't found, display a 404 page not found page
            if (customer == null)
            {
                return HttpNotFound();
            }
            
            return View(customer);
        }


        /// <summary>
        /// Deletes a customer from the system. This method will only handle requests
        /// sent from AJAX.
        /// </summary>
        /// <returns>Json Object</returns>
        [HttpPost]
        public JsonResult AjaxDelete()
        {
            try
            {
                try
                {
                    var id = int.Parse(Request.Form["id"]);
                    var customer = _customerRepo.FindBy(x => x.Id == id).Include("Reservations").FirstOrDefault();

                    if (customer.Reservations.Count > 0)
                    {
                        return Json(new
                        {
                            status = false,
                            response = "Checked out/reserved items found. This customer must return " +
                                            "all items and cancel all reservations before this account may be deleted."
                        });
                    }

                    _customerRepo.Delete(customer);
                    _customerRepo.Save();
                }
                catch (MySqlException e)
                {
                    //1451 == MySQL Foreign key constraint error 
                    //              (Customer has items reserved / checked out)
                    if (e.Number == 1451)
                    {
                        return Json(new
                        {
                            status = false,
                            response = "Checked out/reserved items found. This customer must return " +
                                            "all items and cancel all reservations before this account may be deleted."
                        });
                    }
                    //If the error isn't from a foreign key constraint,
                    //throw error to the generic error message.
                    throw;
                }
            }
            catch (Exception e)
            {
                return Json(new
                {
                    status = false,
                    response = "Oops! Something went wrong. Please refresh and try again.",
                    error = e.Message
                });
            }
            

            return Json(new
            {
                status = true,
                response = "Customer successfully deleted!"
            });
        }

        
        /// <summary>
        /// Deletes customer object from the system
        /// NOTICE: This method is no longer used by the system and is now deprecated.
        ///         The system now handles customer deletion in the AjaxDelete() method.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            var customer = _customerRepo.Find(id);

            if (customer == null)
                return RedirectToAction("Index");

            try
            {
                _customerRepo.Delete(customer);
                _customerRepo.Save();
            }
            catch (MySqlException e)
            {
                if (e.Number == 1451)
                {
                    ModelState.AddModelError(string.Empty,
                        "Checked out/reserved items found. This customer must return " +
                        "all items and cancel all reservations before this account may be deleted.");
                }
                else
                {
                    ModelState.AddModelError(string.Empty,
                        "Oops! Something went wrong. Please refresh and try again.");
                }
            }

            return RedirectToAction("Index");
        }


        /// <summary>
        /// Releases loose objects and other unmanaged resources when the controller
        /// is no longer in use.
        /// Documentation: https://msdn.microsoft.com/en-us/library/fs2xkftw(v=vs.110).aspx
        /// </summary>
        /// <param name="disposing">Indicates whether the method call comes from a 
        ///             Dispose method (its value is true) or from a finalizer (its value is false).
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _customerRepo.Dispose();
            }
            _customerRepo.Dispose(disposing);
        }
    }
}
