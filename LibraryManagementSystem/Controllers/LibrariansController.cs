using System.Web.Mvc;
using LibraryManagementSystem.DAL.Interfaces;
using LibraryManagementSystem.Models;
using LibraryManagementSystem.Utilities;

namespace LibraryManagementSystem.Controllers
{
    /// <summary>
    /// Contains the views and handlers for Librarian object CRUD (Create, Read, Update, Delete)
    /// operations. The user must be logged in to access these operations.
    /// 
    /// NOTICE: This controller is only used by the database initializer to
    ///         create the default librarian object. This controller is not part
    ///         of the general use cases and therefore not accessible from the application.
    /// </summary>
    [Authorize]
    public class LibrariansController : Controller
    {
        //Contains all of the cached Librarian objects
        private readonly ILibrarianRepository _librarianRepository;
        
        public LibrariansController(ILibrarianRepository librarianRepository)
        {
            _librarianRepository = librarianRepository;
        }


        /// <summary>
        /// Displays a table that lists all of the librarians.
        /// Route: /customers
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Index()
        {
            return View(_librarianRepository.GetAll());
        }


        /// <summary>
        /// Displays the properties of a Librarian.
        /// Route: not accessible
        /// </summary>
        /// <param name="id">The ID of a librarian.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Details(int? id)
        {
            //Fetch the librarian from the repository
            var librarian = _librarianRepository.Find(id);

            //Throw 404 error if the customer doesn't exist
            if (librarian == null)
                return HttpNotFound();

            return View(librarian);
        }


        /// <summary>
        /// Displays the form that creates a new librarian.
        /// Route: not accessible
        /// </summary>
        /// <returns>ActionResult</returns>
        public ActionResult Create()
        {
            return View();
        }


        /// <summary>
        /// Post request handler for the form that creates a new book. Using the submitted
        /// data from the form, a new librarian object is created and saved.
        /// </summary>
        /// <param name="librarian">The Librarian object generated by the form submission.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,Username,Password,FirstName,LastName,Email")] Librarian librarian)
        {
            //If validation errors exist, send them to the form view
            if (!ModelState.IsValid)
                return View(librarian);

            //Hash the password send from the form
            var password = Sha256Hasher.Create(librarian.Password);

            //Assign the hashed password to the librarian
            librarian.Password = password;

            //Add the librarian to the repository
            _librarianRepository.Add(librarian);

            //Save the changes to the repository
            _librarianRepository.Save();

            //Redirect to the librarin listing page
            return RedirectToAction("Index");
        }


        /// <summary>
        /// Displays the form to edit an existing librarian.
        /// Route: not accessible
        /// </summary>
        /// <param name="id">The ID of an existing librarian.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Edit(int? id)
        {
            //Fetch the librarian with the provided ID
            var librarian = _librarianRepository.Find(id);

            //If the librarian isn't found, throw a 404 error
            if (librarian == null)
                return HttpNotFound();

            return View(librarian);
        }


        /// <summary>
        /// Post handler for edit form. Saves changes of the librarian object
        /// to the repository.
        /// </summary>
        /// <param name="librarian">The ID of a Librarian.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,Username,Password,FirstName,LastName,Email")] Librarian librarian)
        {
            //If validation errors exist, send them to the form view.
            if (!ModelState.IsValid)
                return View(librarian);

            //Update the librarian's record in the repository
            _librarianRepository.Edit(librarian);

            //Save the repository
            _librarianRepository.Save();

            return RedirectToAction("Index");
        }


        /// <summary>
        /// Displays the form to delete a librarian.
        /// Route: not accessible
        /// </summary>
        /// <param name="id">The ID of a librarian.</param>
        /// <returns>ActionResult</returns>
        public ActionResult Delete(int? id)
        {
            //Fetch the librarian by ID from the repository
            var librarian = _librarianRepository.Find(id);

            //If the librarian is not found, throw a 404 page not found page.
            if (librarian == null)
               return HttpNotFound();

            return View(librarian);
        }

        
        /// <summary>
        /// Deletes a librarian from the system.
        /// </summary>
        /// <param name="id">The ID of a librarian.</param>
        /// <returns>ActionResult</returns>
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            //Fetch the librarian from the repository
            var librarian = _librarianRepository.Find(id);

            //Delete the librarian from the repository.
            //If the librarian object is null, the repository won't do anything.
            _librarianRepository.Delete(librarian);
            
            //Save the changes to the repository
            _librarianRepository.Save();

            //Redirect to the librarian listing page
            return RedirectToAction("Index");
        }


        /// <summary>
        /// Releases loose objects and other unmanaged resources when the controller
        /// is no longer in use.
        /// Documentation: https://msdn.microsoft.com/en-us/library/fs2xkftw(v=vs.110).aspx
        /// </summary>
        /// <param name="disposing">Indicates whether the method call comes from a 
        ///             Dispose method (its value is true) or from a finalizer (its value is false).
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _librarianRepository.Dispose();
            }
            _librarianRepository.Dispose(disposing);
        }
    }
}
